# Test on Windows Desktop
parameters:
- name: testRunName
  type: string
  default: ''
- name: jobName
  type: string
  default: ''
- name: buildJobName
  type: string
  default: ''
- name: testArtifactName
  type: string
  default: ''
- name: configuration
  type: string
  default: 'Debug'
- name: testArguments
  type: string
  default: ''

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.buildJobName }}
  pool:
    # Note that when helix is enabled, the agent running this job is essentially
    # a thin client that kicks off a helix job and waits for it to complete.
    # Thus we don't use a helix queue to run the job here, and instead use the plentiful AzDO vmImages.
    vmImage: windows-2019
  timeoutInMinutes: 120

  variables:
    ${{ if eq(${{ variables.helix }}, true) }}:
      helixArg: -helix

  steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: Download Test Payload
      inputs:
        artifact: ${{ parameters.testArtifactName }}
        path: '$(Build.SourcesDirectory)'

    - task: BatchScript@1
      displayName: Rehydrate RunTests
      inputs:
        filename: ./artifacts/bin/RunTests/${{ parameters.configuration }}/netcoreapp3.1/rehydrate.cmd
      env:
        HELIX_CORRELATION_PAYLOAD: '$(Build.SourcesDirectory)\.duplicate'
      condition: and(succeeded(), eq(variables.helix, true))

    - task: BatchScript@1
      displayName: Rehydrate All
      inputs:
        filename: ./rehydrate-all.cmd
      condition: and(succeeded(), eq(variables.helix, false))

    - task: PowerShell@2
      displayName: Run Unit Tests
      inputs:
        filePath: eng/build.ps1
        arguments: -ci -configuration ${{ parameters.configuration }} ${{ parameters.testArguments }} -collectDumps ${{ variables.helixArg }}
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

    - template: publish-logs.yml
      parameters:
        configuration: ${{ parameters.configuration }}
        jobName: ${{ parameters.jobName }}
